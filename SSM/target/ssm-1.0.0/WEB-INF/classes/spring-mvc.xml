<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                         http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                         http://www.springframework.org/schema/context    
                         http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                         http://www.springframework.org/schema/mvc    
                         http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.cn.zhou.controller" />

	<!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring 
		bean对象 -->
	<bean id="springContextHolder" class="com.cn.zhou.helper.SpringContextHolder"
		lazy-init="false" />
	<!-- 
		当两种标签都没有的时候，框架默认注册的有AnnotationMethodHandlerAdapter这个bean，
		所以能够处理@RequestMapping这个注解，但是只配置了<mvc:default-servlet-handler/>时
		所注册的三个bean都不能处理@RequestMapping注解，因此无法找到相应的Controller，进而无法
		进行访问路径的映射，当两种标签都有的时候，<mvc:annotation-driven/>会注册一个
		RequestMappingHandlerAdapter的bean，这个bean能够处理@RequestMapping这个注解。
	 -->	
	<mvc:annotation-driven/>
	<!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->
	
	<mvc:default-servlet-handler />
	
	<!-- 静态资源映射 -->
	<!-- 
    <mvc:resources mapping="/static/**" location="/static/" />
	 -->
	<!-- 新增web-inf文件夹下的静态资源（新的主页面） -->
	
	<mvc:resources mapping="/chahua3205/**" location="/WEB-INF/chahua3205/" />
	
	
	
	
	<!-- 定义无Controller的path<->view直接映射 -->
	<!-- 
	<mvc:view-controller path="/" view-name="redirect:${web.view.index}"/>
	 -->

	<!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<!-- 
		<property name="prefix" value="/WEB-INF/jsp/" />
		 -->
		<property name="prefix" value="/WEB-INF/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<!-- 指定所上传文件的总大小不能超过10000MB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>

	<!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到WebContent目录下的error.jsp页面 -->
				<prop
					key="org.springframework.web.multipart.MaxUploadSizeExceededException">error</prop>
			</props>
		</property>
	</bean>
	
</beans>  
